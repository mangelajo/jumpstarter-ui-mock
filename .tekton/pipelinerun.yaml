---
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: update-webmock 
  annotations:
    # The event we are targeting as seen from the webhook payload
    # this can be an array too, i.e: [pull_request, push]
    pipelinesascode.tekton.dev/on-event: "[pull_request, push]"

    # The branch or tag we are targeting (ie: main, refs/tags/*)
    pipelinesascode.tekton.dev/on-target-branch: "[main]"

    # Fetch the git-clone task from hub, we are able to reference later on it
    # with taskRef and it will automatically be embedded into our pipeline.
    pipelinesascode.tekton.dev/task: "git-clone"

    # How many runs we want to keep.
    pipelinesascode.tekton.dev/max-keep-runs: "5"
spec:
  params:
    # The variable with brackets are special to Pipelines as Code
    # They will automatically be expanded with the events from Github.
    - name: repo_url
      value: "{{ repo_url }}"
    - name: revision
      value: "{{ revision }}"
    - name: image_name
      value: "image-registry.openshift-image-registry.svc:5000/{{ repo_namespace }}/{{ repo_name }}:{{ revision }}"

  pipelineSpec:
    params:
      - name: repo_url
      - name: revision
      - name: image_name
    workspaces:
      - name: source
      - name: basic-auth
    tasks:
      - name: fetch-repository
        taskRef:
          name: git-clone
        workspaces:
          - name: output
            workspace: source
          - name: basic-auth
            workspace: basic-auth
        params:
          - name: url
            value: $(params.repo_url)
          - name: revision
            value: $(params.revision)
      - name: build-and-push
        runAfter:
          - fetch-repository
        workspaces:
          - name: source
            workspace: source
        params:
          - name: image
            value: $(params.image_name)
          - name: dockerfile
            value: "Containerfile" # As requested, pointing to the Containerfile in your repo root
        taskSpec:
          params:
            - name: image
              description: The name of the image to build and push.
            - name: dockerfile
              description: The path to the Dockerfile.
              default: ./Dockerfile
          workspaces:
            - name: source
              description: The workspace containing the source code.
          steps:
            - name: build
              image: registry.redhat.io/rhel8/buildah
              workingDir: $(workspaces.source.path)
              command: ["/usr/bin/buildah"]
              args:
                - "--storage-driver"
                - "vfs"
                - "bud"
                - "--tls-verify=false"
                - "-f"
                - "$(params.dockerfile)"
                - "-t"
                - "$(params.image)"
                - "."
              volumeMounts:
                - name: varlibcontainers
                  mountPath: /var/lib/containers
            - name: push
              image: registry.redhat.io/rhel8/buildah
              workingDir: $(workspaces.source.path)
              command: ["/usr/bin/buildah"]
              args:
                - "--storage-driver"
                - "vfs"
                - "push"
                - "--tls-verify=false"
                - "$(params.image)"
                - "docker://$(params.image)"
              volumeMounts:
                - name: varlibcontainers
                  mountPath: /var/lib/containers
          volumes:
            - name: varlibcontainers
              emptyDir: {}
  workspaces:
  - name: source
    volumeClaimTemplate:
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
  # This workspace will inject secret to help the git-clone task to be able to
  # checkout the private repositories
  - name: basic-auth
    secret:
      secretName: "{{ git_auth_secret }}"

